"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const assert_1 = require("assert");
const t0_1 = require("t0");
const streamToIterator = require("../lib/index");
const intoStream = require("into-stream");
t0_1.test('empty stream (legacy)', async () => {
    let stream = intoStream.object([]);
    let x = streamToIterator(stream)[Symbol.iterator]();
    await x.init();
    let i = x.next();
    assert_1.ok(i.done);
});
t0_1.test('empty stream', async () => {
    let stream = intoStream.object([]);
    let x = await streamToIterator(stream);
    await x.init();
    let i = await x.next();
    assert_1.ok(i.done);
});
t0_1.test('stream one value (legacy)', async () => {
    let values = ['abc'];
    let stream = intoStream.object(values);
    let x = streamToIterator(stream)[Symbol.iterator]();
    await x.init();
    for (let value of values) {
        let iteration = x.next();
        await checkLegacyIteration(iteration, value);
    }
    assert_1.ok(x.next().done);
});
t0_1.test('stream one value', async () => {
    let values = ['abc'];
    let stream = intoStream.object(values);
    let x = await streamToIterator(stream);
    for (let value of values) {
        let iteration = await x.next();
        checkIteration(iteration, value);
    }
    const iteration = await x.next();
    assert_1.ok(iteration.done);
});
t0_1.test('stream some values (legacy)', async () => {
    let values = [5, 'b', Infinity, 'e', 'p'];
    let stream = intoStream.object(values);
    let x = streamToIterator(stream)[Symbol.iterator]();
    await x.init();
    for (let value of values) {
        let iteration = x.next();
        await checkLegacyIteration(iteration, value);
    }
    assert_1.ok(x.next().done);
});
t0_1.test('stream some values', async () => {
    let values = [5, 'b', Infinity, 'e', 'p'];
    let stream = intoStream.object(values);
    let x = streamToIterator(stream);
    for (let value of values) {
        let iteration = await x.next();
        await checkIteration(iteration, value);
    }
    assert_1.ok((await x.next()).done);
});
t0_1.test('same value on fast iteration (legacy)', async () => {
    let values = [1, 2, 3];
    let stream = intoStream.object(values);
    let x = await streamToIterator(stream)[Symbol.iterator]();
    await x.init();
    const r1 = x.next();
    const r2 = x.next();
    const v1 = await r1.value;
    const v2 = await r2.value;
    assert_1.ok(!r1.done);
    assert_1.ok(!r2.done);
    assert_1.equal(v1, v2);
});
t0_1.test('same value on fast iteration', async () => {
    let values = [1, 2, 3];
    let stream = intoStream.object(values);
    let x = await streamToIterator(stream);
    const p1 = x.next();
    const p2 = x.next();
    const r1 = await p1;
    const r2 = await p2;
    assert_1.ok(!r1.done);
    assert_1.ok(!r2.done);
    assert_1.equal(r1.value, r2.value);
});
t0_1.test('stream some values on non-object mode (legacy)', async () => {
    let values = [Buffer.from([65, 66, 67]), Buffer.from([68, 69])];
    let stream = intoStream(values);
    let x = streamToIterator(stream)[Symbol.iterator]();
    await x.init();
    for (let expected of values) {
        let iteration = x.next();
        assert_1.ok(!iteration.done);
        let actual = await iteration.value;
        assert_1.ok(expected.equals(actual));
    }
    assert_1.ok(x.next().done);
});
t0_1.test('stream some values on non-object mode', async () => {
    let values = [Buffer.from([65, 66, 67]), Buffer.from([68, 69])];
    let stream = intoStream(values);
    let x = streamToIterator(stream);
    for (let expected of values) {
        let iteration = await x.next();
        assert_1.ok(!iteration.done);
        assert_1.ok(expected.equals(iteration.value));
    }
    const lastIteration = await x.next();
    assert_1.ok(lastIteration.done);
});
t0_1.test('readme example 1', async () => {
    const values = [2, 3, 4];
    const readable = intoStream.object(values);
    const iterator = await streamToIterator(readable)[Symbol.iterator]()
        .init();
    const allValues = [];
    for (let valuePromise of iterator) {
        const value = await valuePromise;
        allValues.push(value * value);
    }
    assert_1.deepEqual(allValues, [4, 9, 16]);
});
t0_1.test('readme example 2', async () => {
    let values = [2, 3, 4];
    let readable = intoStream.object(values);
    let iterator = streamToIterator(readable);
    let allValues = [];
    for await (let value of iterator) {
        allValues.push(value * value);
    }
    assert_1.deepEqual(allValues, [4, 9, 16]);
});
async function checkLegacyIteration(iteration, expected) {
    assert_1.ok(!iteration.done);
    let value = await iteration.value;
    assert_1.deepEqual(value, expected);
}
function checkIteration(iteration, expected) {
    assert_1.ok(!iteration.done);
    let value = iteration.value;
    assert_1.deepEqual(value, expected);
}
t0_1.run();
//# sourceMappingURL=index.js.map