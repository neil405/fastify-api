/// <reference types="node" />
import { Writable, WritableOptions } from 'stream';
import Initializable = require('./initializable');
declare class IteratorWritable<T = any> extends Writable implements AsyncIterableIterator<T> {
    private state;
    private writeBox;
    private previousValue;
    private iteratorConsumed;
    private err;
    constructor(opts?: WritableOptions);
    run(): Promise<void>;
    _write(chunk: any, encoding: string, callback: (err?: Error) => void): void;
    writeAsync(chunk: T, enc: string): Promise<void>;
    endRequest(): void;
    private end2;
    next(): Promise<IteratorResult<T>>;
    init(): Promise<this>;
    legacyNext(): IteratorResult<Promise<T>>;
    [Symbol.asyncIterator](): this;
    [Symbol.iterator](): IterableIterator<Promise<T>> & Initializable;
}
export = IteratorWritable;
